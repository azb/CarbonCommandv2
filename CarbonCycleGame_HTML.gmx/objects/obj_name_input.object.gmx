<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>is_enter_name = 1
player_score = 0

debug_text = ""
test_score = 1000


screen_keyboard_width = room_width - (room_width / 10)
screen_keyboard_height = room_height - (room_height / 3)

screen_keyboard_hor_buffer = room_width / 20
screen_keyboard_vert_buffer_top = room_height / 6
screen_keyboard_vert_buffer_bottom = room_height / 8

abc_button_width = screen_keyboard_width / 10
abc_button_height = screen_keyboard_height / 4

highlight_radius = 10
mouse_pos_x = 0
mouse_pos_y = 0

key_pressed[1,1] = '1'
key_pressed[2,1] = '2'
key_pressed[3,1] = '3'
key_pressed[4,1] = '4'
key_pressed[5,1] = '5'
key_pressed[6,1] = '6'
key_pressed[7,1] = '7'
key_pressed[8,1] = '8'
key_pressed[9,1] = '9'
key_pressed[10,1] = '0'

key_pressed[1,2] = 'A'
key_pressed[2,2] = 'B'
key_pressed[3,2] = 'C'
key_pressed[4,2] = 'D'
key_pressed[5,2] = 'E'
key_pressed[6,2] = 'F'
key_pressed[7,2] = 'G'
key_pressed[8,2] = 'H'
key_pressed[9,2] = 'I'
key_pressed[10,2] = 'J'

key_pressed[1,3] = 'K'
key_pressed[2,3] = 'L'
key_pressed[3,3] = 'M'
key_pressed[4,3] = 'N'
key_pressed[5,3] = 'O'
key_pressed[6,3] = 'P'
key_pressed[7,3] = 'Q'
key_pressed[8,3] = 'R'
key_pressed[9,3] = 'S'
key_pressed[10,3] = 'T'

key_pressed[1,4] = 'U'
key_pressed[2,4] = 'V'
key_pressed[3,4] = 'W'
key_pressed[4,4] = 'X'
key_pressed[5,4] = 'Y'
key_pressed[6,4] = 'Z'
key_pressed[7,4] = '.'
key_pressed[8,4] = "SPACE"
key_pressed[9,4] = "DEL"
key_pressed[10,4] = "DONE" //

name_prompt = "Please Enter Your Name: "
final_name = ""
new_name[0] = ''
new_name[1] = ''
new_name[2] = ''
new_name[3] = ''
new_name[4] = ''
new_name[5] = ''
new_name_iterator = 0




scoreboard_name_x = 100
scoreboard_name_y = 100
scoreboard_score_x = 1000
scoreboard_score_y = 100
entry_line_space = 50



audio_stop_all()
audio_play_sound(mus_anticipation,1,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_escape)
{
    game_end()
}


if is_enter_name
{
    if keyboard_check_pressed(ord('A'))
    {
        new_name[new_name_iterator] = 'A'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('B')) 
    {
        new_name[new_name_iterator] = 'B'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('C')) 
    {
        new_name[new_name_iterator] = 'C'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('D')) 
    {
        new_name[new_name_iterator] = 'D'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('E')) 
    {
        new_name[new_name_iterator] = 'E'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('F')) 
    {
        new_name[new_name_iterator] = 'F'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('G')) 
    {
        new_name[new_name_iterator] = 'G'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('H')) 
    {
        new_name[new_name_iterator] = 'H'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('I')) 
    {
        new_name[new_name_iterator] = 'I'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('J')) 
    {
        new_name[new_name_iterator] = 'J'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('K')) 
    {
        new_name[new_name_iterator] = 'K'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('L')) 
    {
        new_name[new_name_iterator] = 'L'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('M')) 
    {
        new_name[new_name_iterator] = 'M'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('N')) 
    {
        new_name[new_name_iterator] = 'N'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('O')) 
    {
        new_name[new_name_iterator] = 'O'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('P')) 
    {
        new_name[new_name_iterator] = 'P'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('Q')) 
    {
        new_name[new_name_iterator] = 'Q'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('R')) 
    {
        new_name[new_name_iterator] = 'R'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('S')) 
    {
        new_name[new_name_iterator] = 'S'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('T')) 
    {
        new_name[new_name_iterator] = 'T'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('U')) 
    {
        new_name[new_name_iterator] = 'U'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('V')) 
    {
        new_name[new_name_iterator] = 'V'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('W')) 
    {
        new_name[new_name_iterator] = 'W'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('X')) 
    {
        new_name[new_name_iterator] = 'X'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('Y')) 
    {
        new_name[new_name_iterator] = 'Y'
        new_name_iterator++
    }
    if keyboard_check_pressed(ord('Z')) 
    {
        new_name[new_name_iterator] = 'Z'
        new_name_iterator++
    }
    
    if keyboard_check_pressed(vk_space)
    {
        new_name[new_name_iterator] = ' '
        new_name_iterator++
    } 
    if keyboard_check_pressed(vk_backspace) 
    {
        if new_name_iterator &gt; 0
            new_name_iterator--
        new_name[new_name_iterator] = ''
    } 
    if keyboard_check_pressed(vk_enter) 
    {
        //test_score++
        //player_score = test_score
        player_score = global.high_score
        final_name = new_name[0] + new_name[1] + new_name[2] + new_name[3] + new_name[4] + new_name[5]
        highscore_add(final_name,player_score)
        is_enter_name = 0
    }
    
    
    if new_name_iterator &gt;= 6
    {
        new_name_iterator = 6
    }
    
}

else 
{
    room_goto(rm_main_menu)
    /*    
    if keyboard_check_pressed(vk_enter) 
    {
        is_enter_name = 1
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if is_enter_name
{
    
    draw_set_font(fnt_large)
    draw_set_halign(fa_left)
    draw_set_valign(fa_middle)
    draw_set_colour(c_white)
    
    draw_text(abc_button_width * 1, abc_button_height * 1, name_prompt + 
        new_name[0] + new_name[1] + new_name[2] + new_name[3] + new_name[4] + new_name[5])
    
    draw_set_font(fnt_keyboard)
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_colour(c_white)
    
    
    draw_text(abc_button_width * 1, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[1,1])
    draw_text(abc_button_width * 2, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[2,1])
    draw_text(abc_button_width * 3, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[3,1])
    draw_text(abc_button_width * 4, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[4,1])
    draw_text(abc_button_width * 5, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[5,1])
    draw_text(abc_button_width * 6, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[6,1])
    draw_text(abc_button_width * 7, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[7,1])
    draw_text(abc_button_width * 8, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[8,1])
    draw_text(abc_button_width * 9, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[9,1])
    draw_text(abc_button_width *10, screen_keyboard_vert_buffer_top + abc_button_height * 1, key_pressed[10,1])
    
    draw_text(abc_button_width * 1, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[1,2])
    draw_text(abc_button_width * 2, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[2,2])
    draw_text(abc_button_width * 3, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[3,2])
    draw_text(abc_button_width * 4, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[4,2])
    draw_text(abc_button_width * 5, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[5,2])
    draw_text(abc_button_width * 6, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[6,2])
    draw_text(abc_button_width * 7, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[7,2])
    draw_text(abc_button_width * 8, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[8,2])
    draw_text(abc_button_width * 9, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[9,2])
    draw_text(abc_button_width *10, screen_keyboard_vert_buffer_top + abc_button_height * 2, key_pressed[10,2])
    
    draw_text(abc_button_width * 1, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[1,3])
    draw_text(abc_button_width * 2, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[2,3])
    draw_text(abc_button_width * 3, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[3,3])
    draw_text(abc_button_width * 4, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[4,3])
    draw_text(abc_button_width * 5, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[5,3])
    draw_text(abc_button_width * 6, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[6,3])
    draw_text(abc_button_width * 7, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[7,3])
    draw_text(abc_button_width * 8, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[8,3])
    draw_text(abc_button_width * 9, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[9,3])
    draw_text(abc_button_width *10, screen_keyboard_vert_buffer_top + abc_button_height * 3, key_pressed[10,3])
    
    draw_text(abc_button_width * 1, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[1,4])
    draw_text(abc_button_width * 2, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[2,4])
    draw_text(abc_button_width * 3, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[3,4])
    draw_text(abc_button_width * 4, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[4,4])
    draw_text(abc_button_width * 5, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[5,4])
    draw_text(abc_button_width * 6, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[6,4])
    draw_text(abc_button_width * 7, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[7,4])
    
    draw_set_font(fnt_keyboard_word)
    draw_text(abc_button_width * 8, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[8,4])
    draw_text(abc_button_width * 9, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[9,4])
    draw_text(abc_button_width *10, screen_keyboard_vert_buffer_top + abc_button_height * 4, key_pressed[10,4])
    
    
    scr_screen_keyboard_button()
    //draw_text(mouse_x, mouse_y - 96, "" + string(mouse_x) + ", " + string(mouse_y) + "#" + string(mouse_pos_x) + ", " + string(mouse_pos_y) + "#" + debug_text)

}
/*
else 
{
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 1), highscore_name(1))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 2), highscore_name(2))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 3), highscore_name(3))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 4), highscore_name(4))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 5), highscore_name(5))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 6), highscore_name(6))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 7), highscore_name(7))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 8), highscore_name(8))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 9), highscore_name(9))
    draw_text(scoreboard_name_x, scoreboard_name_y + (entry_line_space * 10), highscore_name(10))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 1), highscore_value(1))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 2), highscore_value(2))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 3), highscore_value(3))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 4), highscore_value(4))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 5), highscore_value(5))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 6), highscore_value(6))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 7), highscore_value(7))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 8), highscore_value(8))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 9), highscore_value(9))
    draw_text(scoreboard_score_x, scoreboard_name_y + (entry_line_space * 10), highscore_value(10))
    draw_text(mouse_x, mouse_y - 96, string(mouse_x) + ", " + string(mouse_y))

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
